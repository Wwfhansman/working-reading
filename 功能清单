功能清单（详细版）
1. 主窗口设计
页面结构：采用标签页形式，分为“上传”和“书架”两个界面。
功能模块：

上传界面：

文件选择按钮：点击后弹出本地文件对话框，仅允许选择.txt文件。

上传状态显示：实时显示已选文件名称、大小，上传成功时提示“上传完成”。

自动解析：从文件名提取书名（例如 《斗破苍穹》-天蚕土豆.txt → 书名斗破苍穹，作者天蚕土豆）。

书架界面：

书籍列表：以网格或列表形式展示已上传书籍，每项包含：

书名（优先显示解析结果，若未解析成功则显示文件名）

阅读进度（格式：当前页/总页数，例如 25/300）

最后阅读时间（可选）

操作按钮：

删除书籍：长按或右键菜单删除书籍及其阅读记录。

打开阅读：点击书籍项直接进入阅读界面，并跳转到上次阅读位置。

2. 阅读器窗口设计
核心特性：透明隐藏式交互界面，仅当鼠标悬停时显示控件。
页面结构：

上边框（鼠标悬停时显示）：

拖动条：允许拖拽整个窗口位置。

置顶按钮：点击后窗口始终保持在最前端。

关闭按钮：退出阅读器，返回主窗口。

下边框（鼠标悬停时显示）：

翻页按钮：上一页（↑）、下一页（↓）。

页面跳转输入框：显示当前页数（x）和总页数（n），格式为 x/n，支持手动输入数字跳转。

设置按钮（可选）：调整字体大小、背景透明度。

阅读主体：

透明背景：默认不遮挡其他窗口内容（背景透明度可调）。

鼠标悬停显示文字：移开鼠标后文字立即淡出。

滚动支持：鼠标滚轮或触控板滑动翻页。

技术选型
1. 开发框架
语言与框架：C# + WPF

优势：原生支持透明窗口（WindowStyle="None" + AllowsTransparency="True"），适合实现隐藏式界面。

依赖库：System.Text.Json（数据序列化）、Windows API Code Pack（增强文件对话框功能）。

2. 数据存储
替代数据库方案：使用 JSON 文件存储数据

文件结构：

books.json：保存所有书籍元信息（书名、文件路径、总页数等）。

progress.json：保存每本书的阅读进度（当前页码）。

实现逻辑：

每次启动时加载 JSON 文件到内存，退出时自动保存。

文件路径：存储在用户本地 AppData 目录（避免权限问题）。

3. 文本处理
分页算法：基于当前窗口尺寸动态计算每页内容。

使用 FormattedText 类（PresentationCore 库）计算文本渲染高度。

编码处理：自动检测文件编码（UTF-8/GB2312），使用 StreamReader 的自动检测功能。

4. 界面交互
透明窗口控制：通过 Opacity 属性和 MouseEnter/MouseLeave 事件实现悬停显隐。

窗口置顶：设置窗口属性 Topmost = true/false。